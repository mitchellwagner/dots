# These are notes on git #

Git Project Three main parts

-Working Directory
|where you'll be doing all the work: creating, editing, deleting and organizing files

-Staging area
|where you'll list changes you make to the working directory

-Repository
|where Git permanently stores those changes as different versions of the project

In Git, the commit you are currently on is known as the HEAD commit.
In many cases, the most recently made commit is the HEAD commit.

In Git, it's common to change many files, add those files to the staging area, and commit them to Git in a single commit.
|git add filename_1 filename_2

M is short for "modification"


Before reset:

HEAD is at the most recent commit
After resetting:

HEAD goes to a previously made commit of your choice
The gray commits are no longer part of your project
You have in essence rewinded the project's history

New Branch is a different version of the Git project. It contains commits from Master but also has commits that Master does not have.

What would happen if you made a commit on master before you merged the two branches? Furthermore, what if the commit you made on master altered the same exact text you worked on in fencing? When you switch back to master and ask Git to merge the two branches, Git doesn't know which changes you want to keep. This is called a merge conflict.

Delete the content of the line as it appears in the branch you wanted to remove

Delete all of Git's special markings including the words HEAD and fencing. If any of Git's markings remain, for example, >>>>>>> and =======, the conflict remains.


In Git, branches are usually a means to an end. You create them to work on a new project feature, but the end goal is to merge that feature into the master branch. After the branch has been integrated into master, it has served its purpose and can be deleted.

In order to collaborate, you will need:
-A complete replica of the project on your own computers
-A way to keep track of and review each other's work
-Access to a definitive project version
|You can accomplish all of this by using remotes. A remote is a shared Git repository that allows multiple collaborators to work on the same Git project from different locations. Collaborators work on the project independently, and merge changes together when they are ready to do so.

Even though Sally's new commits have been fetched to your local copy of the Git project, those commits are on the origin/master branch. Your local master branch has not been updated yet, so you can't view or make changes to any of the work she has added.

In Lesson III, Git Branching we learned how to merge braches. Now we'll use the git merge command to integrate origin/master into your local master branch. The command:

git merge origin/master
will accomplish this for us.

Now that you've merged origin/master into your local master branch, you're ready to contribute some work of your own. The workflow for Git collaborations typically follows this order:

-Fetch and merge changes from the remote
-Create a branch to work on a new project feature
-Develop the feature on your branch and commit your work
-Fetch and merge from the remote again (in case new commits were made while you were working)
-Push your branch up to the remote for review
Steps 1 and 4 are a safeguard against merge conflicts, which occur when two branches contain file changes that cannot be merged with the git merge command. Step 5 involves git push, a command you will learn in the next exercise.

################## Some Commands ####################

-git init
|The word init means initialize. The command sets up all the tools Git needs to begin tracking changes made 
to the project.

-git status
|you can check the status of changes you made to your code using git status.

-git add filename
|Used to add files to the staging area in order for git to start tracking them

-git diff filename
|Used to check the difference between the wroking directory and the staging area

-git commit -m "message about commit"
|A commit permanently stores changes from the staging area inside the repository.

-git log
|The chonological list of commits can be viewed with this command.

-git show HEAD
|The command to see the HEAD commit.The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.

-git checkout HEAD filename
|will restore the file in your working directory to look exactly as it did when you last made a commit. Discards changes in the working directory.

-git reset HEAD filename
|Used to unstage files from the staging area.
|This command resets the file in the staging area to be the same as the HEAD commit. It does not discard file changes from the working directory, it just removes them from the staging area.

-git reset SHA
|First use git log to see a list of commits. Then add the first 7 characters of the SHA of a previous commit. Can be used to reset to a previous commit in your commit history.

-git branch
|tells you which branch of the project you are on and lists all others

-git branch branch_name
|Creates a new branch

-git checkout branch_name
|You can switch between branches with this

-git merge branch_name
|This command merges another branch to the branch you are on.Used to join file changes from one branch to another.

-git branch -d branch_name
|Used to delete a branch after it serves its purpose.

-git clone remote_location clone_name
|Creates a local copy of a remote
|remote_location tells Git where to go to find the remote. This could be a web address, or a filepath.
|clone_name is the name you give to the directory in which Git will clone the repository.

-git remote -v
|Used to see a list of a Git project's remotes
|Git lists the name of the remote, origin, as well as its location.
|Git automatically names this remote origin, because it refers to the remote repository of origin. However, it is possible to safely change its name.

-git fetch
|Fetches work from the remote into the local copy.
|Used to see if changes have been made to the remote and bring the changes down to your local copy
|This command will not merge changes from the remote into your local repository. It brings those changes onto what's called a remote branch.

-git merge origin/master
|Merges origin/master into your local branch.

-git push origin your_branch_name
|This will push your branch to the remote origin
